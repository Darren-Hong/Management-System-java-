package assignmentgui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author HONG
 */
public class UpdateItem extends javax.swing.JFrame {

    private String userType;

    /**
     * Creates new form UpdateItem
     */
    public UpdateItem() {
        initComponents();
        showupdatedtable("ppe.txt", Utable);
        jComboBox2.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        buttonGroup9 = new javax.swing.ButtonGroup();
        buttonGroup10 = new javax.swing.ButtonGroup();
        buttonGroup11 = new javax.swing.ButtonGroup();
        buttonGroup12 = new javax.swing.ButtonGroup();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Utable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"None", "Head Cover", "Face Shield", "Mask", "Gloves", "Gown", "Shoe Covers" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        Utable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item code", "Item name", "Supplier Code", "Quantity", "Date and  Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Utable);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Action :");

        jLabel2.setText("Item name : ");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Receive");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Distribute");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("View Receive Transaction");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Hospital :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None","Specialist Medical Center", "University Hospital", "Children's Hospital", "Heart Institute" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton5.setText("View Distribue Transaction");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));
        jPanel2.setPreferredSize(new java.awt.Dimension(271, 100));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Inventory Update");
        jLabel3.setPreferredSize(new java.awt.Dimension(124, 32));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(199, 199, 199))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(48, 48, 48)))
                .addContainerGap(68, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jButton2)
                        .addGap(69, 69, 69))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton5)
                            .addComponent(jButton4))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model = (DefaultTableModel) Utable.getModel();
        String selectedItem = jComboBox1.getSelectedItem().toString();
        LocalDate date = java.time.LocalDate.now();

        if (jComboBox1.getSelectedItem().equals("None")) {
            JOptionPane.showMessageDialog(null, "Please choose an item name");
            return;  // Prevent further execution
        }

// The "Receive" block
        if (jRadioButton1.isSelected()) {
            String quantity = JOptionPane.showInputDialog("Please enter the number to receive");

            if (quantity == null || quantity.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid number.");
                return;
            }

            try {
                int quantityChange = Integer.parseInt(quantity); // Convert input to integer

                // Find the row in the table for the selected item
                int rowIndex = -1;
                for (int i = 0; i < model.getRowCount(); i++) {
                    if (model.getValueAt(i, 1).equals(selectedItem)) {
                        rowIndex = i;
                        break;
                    }
                }

                if (rowIndex != -1) {
                    int currentQuantity = Integer.parseInt(model.getValueAt(rowIndex, 3).toString());
                    int newQuantity = currentQuantity + quantityChange;

                    model.setValueAt(newQuantity, rowIndex, 3); // Update table

                    // Record the transaction
                    transaction(transactionID(), (String) Utable.getValueAt(rowIndex, 0),
                            (String) Utable.getValueAt(rowIndex, 2), "Receive", quantityChange);

                    // Update the text file with the new quantity
                    updateItemInFile((String) Utable.getValueAt(rowIndex, 0), newQuantity);
                    updatedItemInFile((String) Utable.getValueAt(rowIndex, 0), newQuantity);

                } else {
                    JOptionPane.showMessageDialog(null, "Item not found in the table.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid number.");
            }
//Distribute
        } else if (jRadioButton2.isSelected()) {  // The "Distribute" block
            if (jComboBox2.getSelectedItem().equals("None")) {
                JOptionPane.showMessageDialog(null, "Please select a hospital");
                return;  // Prevent further execution
            }

            String quantity = JOptionPane.showInputDialog("Please enter a number to distribute");

            if (quantity == null || quantity.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid number.");
                return;
            }

            try {
                int rowIndex = -1;
                int quantityChange = Integer.parseInt(quantity); // Convert input to integer

                for (int a = 0; a < model.getRowCount(); a++) {
                    if (model.getValueAt(a, 1).equals(selectedItem)) {
                        rowIndex = a;
                        break;
                    }
                }

                if (rowIndex != -1) {
                    String transactionID = transactionID();
                    String itemcode = (String) model.getValueAt(rowIndex, 1);
                    String suppliercode = (String) model.getValueAt(rowIndex, 2);
                    String action = "Distribute";
                    String hcode = jComboBox2.getSelectedItem().toString();  // Get selected hospital

                    int currentQuantity = Integer.parseInt(model.getValueAt(rowIndex, 3).toString());

                    if (currentQuantity < quantityChange) {
                        JOptionPane.showMessageDialog(null, "Insufficient quantity in stock.");
                    } else {
                        int newQuantity = currentQuantity - quantityChange;

                        // Update table
                        model.setValueAt(newQuantity, rowIndex, 3);

                        try (FileWriter i = new FileWriter("transaction.txt", true)) {
                            i.write("Transaction ID :" + transactionID + "\n");
                            i.write("Item Code :" + itemcode + "\n");
                            i.write("Supplier Code :" + suppliercode + "\n");
                            i.write("Action :" + action + "\n");
                            i.write("Hospital Code :" + hcode + "\n");
                            i.write("Quantity :" + quantity + "\n");
                            i.write("Date & Time:" + java.time.LocalDate.now() + "\n");
                            i.write("-----------------------------\n");
                            JOptionPane.showMessageDialog(null, "Transaction data saved successfully");
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, "Error writing to file");
                        }

                        // Update the text file with the new quantity
                        updateItemInFile((String) Utable.getValueAt(rowIndex, 0), newQuantity);
                        updatedItemInFile((String) Utable.getValueAt(rowIndex, 0), newQuantity);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Item not found in the table.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid number.");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //class name + variable
        ReceiveTransaction transactionscreen = new ReceiveTransaction();
        transactionscreen.setVisible(true);
        this.setVisible(false);
        this.dispose();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if (jRadioButton2.isSelected()) {
            jComboBox2.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        if (jRadioButton1.isSelected()) {
            jComboBox2.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DistributeTransaction screen = new DistributeTransaction();
        screen.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Homepage home = new Homepage(userType);
        home.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateItem().setVisible(true);
            }
        });
    }

    public static void transaction(String transactionID, String iteamcode, String suppliercode, String action, int quantity) {
        try (
                FileWriter i = new FileWriter("transaction.txt", true)) {
            i.write("Transaction ID :" + transactionID + "\n");
            i.write("Item Code :" + iteamcode + "\n");
            i.write("Supplier Code :" + suppliercode + "\n");
            i.write("Action :" + action + "\n");
            i.write("Quantity :" + quantity + "\n");
            i.write("Date & Time:" + java.time.LocalDate.now() + "\n");
            i.write("-----------------------------\n");
            JOptionPane.showMessageDialog(null, "Transaction data saved successfully");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error writing to file");

        }

    }

    public static String transactionID() {
        Random id = new Random();
        int randomID = id.nextInt(1000);
        return "TID" + randomID;

    }

    private void LoadDateFromFile(String Filename) {
        try {
            BufferedReader r = new BufferedReader(new FileReader("ppe.txt"));
            DefaultTableModel model = (DefaultTableModel) Utable.getModel();
            String line;
            model.setRowCount(0);

            while ((line = r.readLine()) != null) {
                String value[] = line.split(",");
                if (value.length == 4);
                String code = value[0].trim();
                String name = value[1].trim();
                String supplier = value[2].trim();
                String quantity = value[3].trim();
                model.addRow(new Object[]{code, name, supplier, quantity});

            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading to file");

        }

    }

    public static void IteamStored(String itemcode, String quantity) {
        try (
                FileWriter wr = new FileWriter("Itemstore.txt", true)) {
            wr.write("Item Code:" + itemcode + "\n");
            wr.write("Quantity :" + quantity + "\n");
            wr.write("Date :" + java.time.LocalDate.now() + "\n");
            wr.write("-----------------------------\n");
            JOptionPane.showMessageDialog(null, "Data stored successfully");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error writing to file");
        }
    }

    public void updateItemInFile(String itemCode, int newQuantity) {
        File inputFile = new File("Itemstore.txt");
        File tempFile = new File("tempItemstore.txt");

        try (
                BufferedReader reader = new BufferedReader(new FileReader(inputFile)); BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            boolean isEntryFound = false;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Item Code: " + itemCode)) {
                    isEntryFound = true; // Item found
                    writer.write(line); // Write "Item Code: ..."
                    writer.newLine();

                    // Read and write the next line (Quantity), but modify it
                    String quantityLine = reader.readLine();
                    writer.write("Quantity: " + newQuantity); // Update the quantity
                    writer.newLine();

                    // Write the next line (Date) unchanged
                    String dateLine = reader.readLine();
                    writer.write("Date: " + java.time.LocalDate.now());
                    writer.newLine();

                } else {
                    // Write all other lines as they are
                    writer.write(line);
                    writer.newLine();
                }
            }

            if (!isEntryFound) {
                JOptionPane.showMessageDialog(null, "Item not found in the file.");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error updating the file.");
        }

        // Replace the old file with the updated file
        if (!inputFile.delete()) {
            JOptionPane.showMessageDialog(null, "Could not delete old file.");
        }
        if (!tempFile.renameTo(inputFile)) {
            JOptionPane.showMessageDialog(null, "Could not rename temp file.");
        }
    }

    private void updatedItemInFile(String itemCode, int newQuantity) {
        File file = new File("ppe.txt");
        StringBuilder updatedContent = new StringBuilder();

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] row = line.split(",");
                if (row.length == 5 && row[0].equals(itemCode)) {
                    // Update the quantity for the matched item
                    row[3] = String.valueOf(newQuantity);
                    updatedContent.append(String.join(",", row)).append("\n");
                } else {
                    updatedContent.append(line).append("\n");
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading file.");
        }

        // Write the updated content back to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(updatedContent.toString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error writing to file.");
        }
    }

    private void showupdatedtable(String txtFile, JTable Utable) {
        try {
            BufferedReader r = new BufferedReader(new FileReader(txtFile));  // Use txtFile parameter to read correct file
            DefaultTableModel model = (DefaultTableModel) Utable.getModel();
            String line;
            model.setRowCount(0);

            while ((line = r.readLine()) != null) {
                String[] value = line.split(",");
                // Check if the split line contains exactly 4 elements
                if (value.length == 5) {
                    String code = value[0].trim();
                    String name = value[1].trim();
                    String supplier = value[2].trim();
                    String quantity = value[3].trim();
                    String date = value[4].trim();
                    // Add the row to the table model
                    model.addRow(new Object[]{code, name, supplier, quantity, date});
                }
            }
            r.close();  // Always close the reader after use
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading the file.");
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Utable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup10;
    private javax.swing.ButtonGroup buttonGroup11;
    private javax.swing.ButtonGroup buttonGroup12;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup buttonGroup9;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    // End of variables declaration//GEN-END:variables
}
